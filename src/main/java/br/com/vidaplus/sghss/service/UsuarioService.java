package br.com.vidaplus.sghss.service;

import br.com.vidaplus.sghss.model.Usuario;
import br.com.vidaplus.sghss.model.Role;
import br.com.vidaplus.sghss.repository.UsuarioRepository;
import br.com.vidaplus.sghss.repository.RoleRepository;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import java.util.Optional;
import java.util.Set;

/**
 * Servi칞o respons치vel por gerenciar as opera칞칫es relacionadas aos usu치rios.
 * Inclui m칠todos para criar usu치rios, buscar por nome de usu치rio e atribuir pap칠is.
 */
@Service
public class UsuarioService {

    /**
     * Reposit칩rio para acessar os dados dos usu치rios.
     */
    private final UsuarioRepository usuarioRepository;
    private final RoleRepository roleRepository;
    private final PasswordEncoder passwordEncoder;

    /**
     * Construtor que recebe os reposit칩rios de usu치rios e pap칠is, al칠m do codificador de senhas.
     *
     * @param usuarioRepository Reposit칩rio de usu치rios.
     * @param roleRepository Reposit칩rio de pap칠is.
     * @param passwordEncoder Codificador de senhas.
     */
    public UsuarioService(UsuarioRepository usuarioRepository, RoleRepository roleRepository, PasswordEncoder passwordEncoder) {
        this.usuarioRepository = usuarioRepository;
        this.roleRepository = roleRepository;
        this.passwordEncoder = passwordEncoder;
    }

    /**
     * Cria um novo usu치rio com o nome de usu치rio, senha e papel especificados.
     * Verifica se o usu치rio j치 existe para evitar duplica칞칚o.
     *
     * @param username Nome de usu치rio do novo usu치rio.
     * @param password Senha do novo usu치rio.
     * @param roleNome Nome do papel a ser atribu칤do ao usu치rio.
     * @return O usu치rio criado.
     * @throws RuntimeException Se o usu치rio j치 existir ou se o papel n칚o for encontrado.
     */
    public Usuario criarUsuario(String username, String password, String roleNome) {
        if (usuarioRepository.findByUsername(username).isPresent()) {
            throw new RuntimeException("Usu치rio j치 existe no sistema!"); // 游댠 Evita duplica칞칚o!
        }

        String senhaCriptografada = passwordEncoder.encode(password);
        Role role = roleRepository.findByNome(roleNome).orElseThrow(() -> new RuntimeException("Role n칚o encontrada" + roleNome));

        Usuario usuario = new Usuario(username, senhaCriptografada);
        usuario.setRoles(Set.of(role));

        return usuarioRepository.save(usuario);
    }

    /**
     * Busca um usu치rio pelo nome de usu치rio.
     *
     * @param username Nome de usu치rio a ser buscado.
     * @return Um Optional contendo o usu치rio, se encontrado.
     */
    public Optional<Usuario> buscarPorUsername(String username) {
        return usuarioRepository.findByUsername(username);
    }
}